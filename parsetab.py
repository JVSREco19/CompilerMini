
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND ASSIGN BEGIN COLON COMMA COMMENT CONSTANT DECIMAL DECLARE DO ELSE END FOR IDENTIFIER IF INTEGER LITERAL LPAREN MINUS MOD MULOP NOT OR PROGRAM QUESTION_MARK READ RELOP RPAREN SEMICOLON SHIFTOP THEN TO WHILE WRITEprogram : PROGRAM IDENTIFIER bodybody : declare_opt BEGIN stmt_list ENDdeclare_opt : DECLARE decl_listdecl_list : decl  decl_listdecl_list : decldecl : type ident_list SEMICOLON type : INTEGER \n  | DECIMALident_list : IDENTIFIER COMMA ident_listident_list : IDENTIFIERstmt_list : stmt SEMICOLON stmt_list \n  stmt_list : stmt SEMICOLON\n  stmt : if_stmt \n            | assign_stmt \n            | while_stmt \n            | do_while_stmt \n            | for_stmt \n            | read_stmt \n            | write_stmt \n  assign_stmt : IDENTIFIER ASSIGN simple_exprif_stmt : IF condition THEN stmt_list END\n              | IF condition THEN stmt_list ELSE stmt_list END\n  do_while_stmt : DO stmt_list stmt_suffixstmt_suffix : WHILE conditionfor_stmt : FOR assign_stmt TO condition DO stmt_list ENDwhile_stmt : WHILE condition DO stmt_list ENDcondition : expressionread_stmt : READ LPAREN IDENTIFIER RPARENwrite_stmt : WRITE LPAREN writable RPARENwritable : simple_expr\n              | LITERAL\n  expression : simple_expr\n                | expression RELOP expression\n                | LPAREN expression RPAREN\n  simple_expr : term\n                  | simple_expr ADDOP simple_expr\n                  | simple_expr mulop simple_expr\n                  | LPAREN simple_expr RPAREN\n                  | simple_expr QUESTION_MARK simple_expr COLON simple_expr\n  mulop : MULOP\n            | AND\n            | MOD\n              \n  ADDOP : MINUS\n            | ADD\n            | OR\n              \n  term : factor_a\n          | term mulop factor_a\n  factor_a : factor\n              | NOT factor\n              | MINUS factor\n  factor : IDENTIFIER\n            | CONSTANT\n            | LPAREN expression RPAREN\n  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,4,32,],[0,-1,-2,]),'IDENTIFIER':([2,7,10,11,12,22,24,25,26,33,37,41,42,45,49,50,52,54,55,56,57,58,59,60,61,62,63,64,67,69,72,73,75,76,91,99,100,103,],[3,23,31,-7,-8,43,43,23,23,23,43,43,43,43,77,43,31,23,43,43,43,43,-43,-44,-45,-40,-41,-42,43,43,43,23,43,43,43,23,43,23,]),'DECLARE':([3,],[6,]),'BEGIN':([5,8,9,29,51,],[7,-3,-5,-4,-6,]),'INTEGER':([6,9,51,],[11,11,-6,]),'DECIMAL':([6,9,51,],[12,12,-6,]),'IF':([7,25,33,54,73,99,103,],[22,22,22,22,22,22,22,]),'WHILE':([7,25,33,47,53,54,73,99,103,],[24,24,24,75,-11,24,24,24,24,]),'DO':([7,25,33,35,36,38,39,40,43,44,46,54,68,70,73,83,84,85,87,88,89,95,99,101,103,105,],[25,25,25,-27,-32,-35,-46,-48,-51,-52,73,25,-49,-50,25,-33,-36,-37,-34,-38,-47,103,25,-53,25,-39,]),'FOR':([7,25,33,54,73,99,103,],[26,26,26,26,26,26,26,]),'READ':([7,25,33,54,73,99,103,],[27,27,27,27,27,27,27,]),'WRITE':([7,25,33,54,73,99,103,],[28,28,28,28,28,28,28,]),'END':([13,33,53,82,93,104,106,],[32,-12,-11,98,102,107,108,]),'SEMICOLON':([14,15,16,17,18,19,20,21,30,31,35,36,38,39,40,43,44,68,70,71,74,81,83,84,85,87,88,89,94,96,97,98,101,102,105,107,108,],[33,-13,-14,-15,-16,-17,-18,-19,51,-10,-27,-32,-35,-46,-48,-51,-52,-49,-50,-20,-23,-9,-33,-36,-37,-34,-38,-47,-24,-28,-29,-21,-53,-26,-39,-22,-25,]),'LPAREN':([22,24,27,28,37,41,42,45,50,55,56,57,58,59,60,61,62,63,64,67,69,72,75,76,91,100,],[37,37,49,50,37,69,69,72,72,37,72,72,72,-43,-44,-45,-40,-41,-42,69,37,91,37,37,91,72,]),'NOT':([22,24,37,45,50,55,56,57,58,59,60,61,62,63,64,67,69,72,75,76,91,100,],[41,41,41,41,41,41,41,41,41,-43,-44,-45,-40,-41,-42,41,41,41,41,41,41,41,]),'MINUS':([22,24,36,37,38,39,40,43,44,45,50,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,75,76,79,84,85,86,87,88,89,91,92,100,101,105,],[42,42,59,42,-35,-46,-48,-51,-52,42,42,42,42,42,42,-43,-44,-45,-40,-41,-42,59,42,-49,42,-50,59,42,42,42,59,59,59,59,-53,-38,-47,42,59,42,-53,59,]),'CONSTANT':([22,24,37,41,42,45,50,55,56,57,58,59,60,61,62,63,64,67,69,72,75,76,91,100,],[44,44,44,44,44,44,44,44,44,44,44,-43,-44,-45,-40,-41,-42,44,44,44,44,44,44,44,]),'ASSIGN':([23,],[45,]),'COMMA':([31,],[52,]),'ELSE':([33,53,82,],[-12,-11,99,]),'THEN':([34,35,36,38,39,40,43,44,68,70,83,84,85,87,88,89,101,105,],[54,-27,-32,-35,-46,-48,-51,-52,-49,-50,-33,-36,-37,-34,-38,-47,-53,-39,]),'RELOP':([35,36,38,39,40,43,44,65,66,68,70,83,84,85,87,88,89,90,92,101,105,],[55,-32,-35,-46,-48,-51,-52,55,-32,-49,-50,55,-36,-37,-34,-38,-47,55,-32,-53,-39,]),'RPAREN':([36,38,39,40,43,44,65,66,68,70,77,78,79,80,83,84,85,87,88,89,90,92,101,105,],[-32,-35,-46,-48,-51,-52,87,88,-49,-50,96,97,-30,-31,-33,-36,-37,-34,-38,-47,101,88,-53,-39,]),'QUESTION_MARK':([36,38,39,40,43,44,66,68,70,71,79,84,85,86,87,88,89,92,101,105,],[58,-35,-46,-48,-51,-52,58,-49,-50,58,58,58,58,58,-53,-38,-47,58,-53,58,]),'ADD':([36,38,39,40,43,44,66,68,70,71,79,84,85,86,87,88,89,92,101,105,],[60,-35,-46,-48,-51,-52,60,-49,-50,60,60,60,60,60,-53,-38,-47,60,-53,60,]),'OR':([36,38,39,40,43,44,66,68,70,71,79,84,85,86,87,88,89,92,101,105,],[61,-35,-46,-48,-51,-52,61,-49,-50,61,61,61,61,61,-53,-38,-47,61,-53,61,]),'MULOP':([36,38,39,40,43,44,66,68,70,71,79,84,85,86,87,88,89,92,101,105,],[62,62,-46,-48,-51,-52,62,-49,-50,62,62,62,62,62,-53,-38,-47,62,-53,62,]),'AND':([36,38,39,40,43,44,66,68,70,71,79,84,85,86,87,88,89,92,101,105,],[63,63,-46,-48,-51,-52,63,-49,-50,63,63,63,63,63,-53,-38,-47,63,-53,63,]),'MOD':([36,38,39,40,43,44,66,68,70,71,79,84,85,86,87,88,89,92,101,105,],[64,64,-46,-48,-51,-52,64,-49,-50,64,64,64,64,64,-53,-38,-47,64,-53,64,]),'TO':([38,39,40,43,44,48,68,70,71,84,85,88,89,101,105,],[-35,-46,-48,-51,-52,76,-49,-50,-20,-36,-37,-38,-47,-53,-39,]),'COLON':([38,39,40,43,44,68,70,84,85,86,88,89,101,105,],[-35,-46,-48,-51,-52,-49,-50,-36,-37,100,-38,-47,-53,-39,]),'LITERAL':([50,],[80,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body':([3,],[4,]),'declare_opt':([3,],[5,]),'decl_list':([6,9,],[8,29,]),'decl':([6,9,],[9,9,]),'type':([6,9,],[10,10,]),'stmt_list':([7,25,33,54,73,99,103,],[13,47,53,82,93,104,106,]),'stmt':([7,25,33,54,73,99,103,],[14,14,14,14,14,14,14,]),'if_stmt':([7,25,33,54,73,99,103,],[15,15,15,15,15,15,15,]),'assign_stmt':([7,25,26,33,54,73,99,103,],[16,16,48,16,16,16,16,16,]),'while_stmt':([7,25,33,54,73,99,103,],[17,17,17,17,17,17,17,]),'do_while_stmt':([7,25,33,54,73,99,103,],[18,18,18,18,18,18,18,]),'for_stmt':([7,25,33,54,73,99,103,],[19,19,19,19,19,19,19,]),'read_stmt':([7,25,33,54,73,99,103,],[20,20,20,20,20,20,20,]),'write_stmt':([7,25,33,54,73,99,103,],[21,21,21,21,21,21,21,]),'ident_list':([10,52,],[30,81,]),'condition':([22,24,75,76,],[34,46,94,95,]),'expression':([22,24,37,55,69,72,75,76,91,],[35,35,65,83,90,90,35,35,65,]),'simple_expr':([22,24,37,45,50,55,56,57,58,69,72,75,76,91,100,],[36,36,66,71,79,36,84,85,86,36,92,36,36,92,105,]),'term':([22,24,37,45,50,55,56,57,58,69,72,75,76,91,100,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'factor_a':([22,24,37,45,50,55,56,57,58,67,69,72,75,76,91,100,],[39,39,39,39,39,39,39,39,39,89,39,39,39,39,39,39,]),'factor':([22,24,37,41,42,45,50,55,56,57,58,67,69,72,75,76,91,100,],[40,40,40,68,70,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'ADDOP':([36,66,71,79,84,85,86,92,105,],[56,56,56,56,56,56,56,56,56,]),'mulop':([36,38,66,71,79,84,85,86,92,105,],[57,67,57,57,57,57,57,57,57,57,]),'stmt_suffix':([47,],[74,]),'writable':([50,],[78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM IDENTIFIER body','program',3,'p_program','MiniSintax.py',9),
  ('body -> declare_opt BEGIN stmt_list END','body',4,'p_body','MiniSintax.py',13),
  ('declare_opt -> DECLARE decl_list','declare_opt',2,'p_declare_opt','MiniSintax.py',17),
  ('decl_list -> decl decl_list','decl_list',2,'p_decl_list','MiniSintax.py',20),
  ('decl_list -> decl','decl_list',1,'p_decl_list_single','MiniSintax.py',24),
  ('decl -> type ident_list SEMICOLON','decl',3,'p_decl','MiniSintax.py',28),
  ('type -> INTEGER','type',1,'p_type','MiniSintax.py',32),
  ('type -> DECIMAL','type',1,'p_type','MiniSintax.py',33),
  ('ident_list -> IDENTIFIER COMMA ident_list','ident_list',3,'p_ident_list','MiniSintax.py',37),
  ('ident_list -> IDENTIFIER','ident_list',1,'p_ident_list_single','MiniSintax.py',40),
  ('stmt_list -> stmt SEMICOLON stmt_list','stmt_list',3,'p_stmt_list','MiniSintax.py',43),
  ('stmt_list -> stmt SEMICOLON','stmt_list',2,'p_stmt_list_single','MiniSintax.py',46),
  ('stmt -> if_stmt','stmt',1,'p_stmt','MiniSintax.py',50),
  ('stmt -> assign_stmt','stmt',1,'p_stmt','MiniSintax.py',51),
  ('stmt -> while_stmt','stmt',1,'p_stmt','MiniSintax.py',52),
  ('stmt -> do_while_stmt','stmt',1,'p_stmt','MiniSintax.py',53),
  ('stmt -> for_stmt','stmt',1,'p_stmt','MiniSintax.py',54),
  ('stmt -> read_stmt','stmt',1,'p_stmt','MiniSintax.py',55),
  ('stmt -> write_stmt','stmt',1,'p_stmt','MiniSintax.py',56),
  ('assign_stmt -> IDENTIFIER ASSIGN simple_expr','assign_stmt',3,'p_assign_stmt','MiniSintax.py',60),
  ('if_stmt -> IF condition THEN stmt_list END','if_stmt',5,'p_if_stmt','MiniSintax.py',63),
  ('if_stmt -> IF condition THEN stmt_list ELSE stmt_list END','if_stmt',7,'p_if_stmt','MiniSintax.py',64),
  ('do_while_stmt -> DO stmt_list stmt_suffix','do_while_stmt',3,'p_do_while_stmt','MiniSintax.py',68),
  ('stmt_suffix -> WHILE condition','stmt_suffix',2,'p_stmt_suffix','MiniSintax.py',73),
  ('for_stmt -> FOR assign_stmt TO condition DO stmt_list END','for_stmt',7,'p_for_stmt','MiniSintax.py',76),
  ('while_stmt -> WHILE condition DO stmt_list END','while_stmt',5,'p_while_stmt','MiniSintax.py',79),
  ('condition -> expression','condition',1,'p_condition','MiniSintax.py',82),
  ('read_stmt -> READ LPAREN IDENTIFIER RPAREN','read_stmt',4,'p_read_stmt','MiniSintax.py',85),
  ('write_stmt -> WRITE LPAREN writable RPAREN','write_stmt',4,'p_write_stmt','MiniSintax.py',88),
  ('writable -> simple_expr','writable',1,'p_writable','MiniSintax.py',91),
  ('writable -> LITERAL','writable',1,'p_writable','MiniSintax.py',92),
  ('expression -> simple_expr','expression',1,'p_expression','MiniSintax.py',96),
  ('expression -> expression RELOP expression','expression',3,'p_expression','MiniSintax.py',97),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','MiniSintax.py',98),
  ('simple_expr -> term','simple_expr',1,'p_simple_expr','MiniSintax.py',102),
  ('simple_expr -> simple_expr ADDOP simple_expr','simple_expr',3,'p_simple_expr','MiniSintax.py',103),
  ('simple_expr -> simple_expr mulop simple_expr','simple_expr',3,'p_simple_expr','MiniSintax.py',104),
  ('simple_expr -> LPAREN simple_expr RPAREN','simple_expr',3,'p_simple_expr','MiniSintax.py',105),
  ('simple_expr -> simple_expr QUESTION_MARK simple_expr COLON simple_expr','simple_expr',5,'p_simple_expr','MiniSintax.py',106),
  ('mulop -> MULOP','mulop',1,'p_mulop','MiniSintax.py',111),
  ('mulop -> AND','mulop',1,'p_mulop','MiniSintax.py',112),
  ('mulop -> MOD','mulop',1,'p_mulop','MiniSintax.py',113),
  ('ADDOP -> MINUS','ADDOP',1,'p_ADDOP','MiniSintax.py',119),
  ('ADDOP -> ADD','ADDOP',1,'p_ADDOP','MiniSintax.py',120),
  ('ADDOP -> OR','ADDOP',1,'p_ADDOP','MiniSintax.py',121),
  ('term -> factor_a','term',1,'p_term','MiniSintax.py',126),
  ('term -> term mulop factor_a','term',3,'p_term','MiniSintax.py',127),
  ('factor_a -> factor','factor_a',1,'p_factor_a','MiniSintax.py',131),
  ('factor_a -> NOT factor','factor_a',2,'p_factor_a','MiniSintax.py',132),
  ('factor_a -> MINUS factor','factor_a',2,'p_factor_a','MiniSintax.py',133),
  ('factor -> IDENTIFIER','factor',1,'p_factor','MiniSintax.py',137),
  ('factor -> CONSTANT','factor',1,'p_factor','MiniSintax.py',138),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','MiniSintax.py',139),
]
